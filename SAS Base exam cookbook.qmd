---
Title: SAS BASE EXAM COOKBOOK
---

SAS, AND WHY IT MATTERS
-----------------------

***SAS (Statistical Analysis System)*** has been a cornerstone of data analysis for over half a century. Unlike many programming languages that rise and fall in popularity, SAS has maintained a consistent, stable presence in industries where precision and compliance are non‑negotiable — particularly pharmaceutical research, clinical trials, and regulatory reporting.

Strictly speaking, ***SAS*** itself is not just one programming language, but a comprehensive data management and analytics system (like a platform).

Inside **SAS**, there are **multiple languages**:

- DATA Step language (for data manipulation)
- PROCs language (to call procedures like PROC MEANS)
- Macro language (for automation and dynamic code)
- SQL/FedSQL (relational queries)
- DS2 (an object‑oriented data step extension)
- IML (Interactive Matrix Language) (for advanced stats)
- SCL (Screen Control Language) (for UI stuff)

So when people say “***SAS*** is a programming language”, they usually mean the ***DATA Step*** + ***PROC*** (what we mostly use in ***Base SAS***). But technically, ***SAS*** is a full system that hosts several languages.

### Why invest in SAS?

- Proven track record: Trusted by the FDA, EMA, and other regulatory bodies worldwide.
- Stability: Skills learned today will remain valid for years — SAS syntax changes very little over time.
- Industry demand: SAS expertise is a core requirement for biostatisticians, statistical programmers, and data managers in pharma and healthcare.
- Compliance‑ready: SAS meets strict regulatory standards (21 CFR Part 11, GxP), making it indispensable for clinical submissions.
- Learning SAS is not just about passing an exam — it’s an investment in future‑proof skills that keep you competitive in a field where reliability matters most.

ANATOMY OF A SAS PROGRAM
------------------------

Each block (***step***) starts with DATA or PROC and ends with `RUN;`.
Use `QUIT;` for some processes (e.g., PROC SQL).

### DATA step (build/modify data)

```{sas}
DATA library.dataset;        * The step starts;
    SET library.source;      * Brings in existing data (optional);
    INPUT var1 var2 $ var3;  * Defines variables for new data (optional);
    DATALINES;               * Inlines data (optional);
value1 value2 value3
...
;
    /* Transformations, conditions, new variables */
    IF var3 >= 60 THEN newvar = "Pass";
    ELSE newvar = "Fail";
RUN;                         * The step ends;
```

### PROC step (analyze/report)

```{sas}
PROC <procedure_name> DATA = <library.dataset>;  * The step starts;
    VAR var1 var2;                               * Selects variables;
    TITLE "Report title";                        * Optional title;
RUN;                                             * The step ends;
```

***

LIBRARIES IN SAS ON-DEMAND FOR ACADEMICS (SODA)
-----------------------------------------------

### Default libraries

- `Work`: temporary; cleared on logout
- `MyLib`: permanent; points to `/home/<username>/`

### Custom libraries

Creating a provate library pointing to a subfolder:

```{sas}
LIBNAME <Library-Name> "/home/<username>/NikDanMD";
```

### Saving data

Temporary (gone after logout):

```{sas}
DATA <Library-Name>;
```

Permanent (survives logout):

```{sas}
DATA MyLib.<Library-Name>;
```

### Default SAS libraries

- ***work*** - temporary: default location for new datasets if no library is specified
- ***sasuser*** - permanent: stores user‑specific settings & data; persists across sessions
- ***user-defined libraries*** (e.g., `mylib`) — custom libraries assigned using LIBNAME to point to a chosen folder; persist as long as the folder exists, but need to be reassigned in each new session (unless included in `autoexec.sas`).

### The `autoexec.sas`

The ***autoexec.sas*** is a special SAS program that runs automatically each time SAS starts. It is typically used to:

- assign libraries (e.g., `LIBNAME mylib '/home/username/sas-base-exam';`) 
- set global options (e.g., `OPTIONS NODATE NONUMBER;`)  
- load macros or other frequently used code  

In SODA, `autoexec.sas` can be edited in the home directory. In local SAS installs, it usually resides in the SAS configuration folder or a custom path a user defines.  

**NB!** In the exam environment, you will likely need to reassign libraries manually — don’t rely on `autoexec.sas`.

***

CREATING/MODIFYING DATASETS
---------------------------

### Creating a dataset from scratch

```{sas}
DATA students;
    INPUT ID Name $ Score;
    DATALINES;
1 John 78
2 Mary 55
3 Paul 90
;
RUN;
```

Variables are numeric by default; use `$` for a character. Rows must match the order defined in INPUT.

### Modifying an existing dataset

SET: brings in an existing dataset. Assigning a value to a new variable creates it automatically as a new column.

```{sas}
DATA students2;
    SET students;
    IF Score >= 60 THEN Result = "Pass";
    ELSE Result = "Fail";
RUN;
```

***

VIEWING DATASET CONTENT
-----------------------

### Basic syntax

PROC PRINT: display a dataset

```{sas}
PROC PRINT DATA = students;
RUN;
```

### Selecting variables

```{sas}
PROC PRINT DATA = students;
    VAR Name Score Result;
RUN;
```

### Adding a title

```{sas}
PROC PRINT DATA = students;
    VAR Name Score Result;
    TITLE "Exam results for students";
RUN;
```

Tips:

- omitting VAR prints all variables
- TITLE improves output clarity (optional)

***

FILTERING DATA 
--------------

```{sas}
PROC PRINT DATA=sashelp.class;
	WHERE Sex='F';
RUN;
```

WHERE: filters dataset rows.

### Combinations of the conditions

- AND: both conditions true.
- OR: at least one condition true.
- NOT: exclude condition.
- IN: match any in a list (e.g., `WHERE Sex IN ('F','M');`).

**NB!** Only one WHERE per PROC! Combine conditions instead of stacking.

***

IMPORTING & EXPLORING DATA
--------------------------

### Key definitions

PROC IMPORT – A procedure to read external files (like .csv, .xlsx) into SAS as datasets.

DATAFILE – The location and name of the external file to import.

OUT – The name you give the new SAS dataset.

DBMS – The imported file's format (e.g., .csv, .xlsx).

REPLACE – Overwrites the dataset if it already exists.

GETNAMES – Tells SAS if the first row contains variable names (`yes` or `no`).

PROC CONTENTS – A procedure that displays the dataset structure: variable names, types, lengths, number of observations, and other metadata.

PROC MEANS – A procedure to calculate basic **descriptive statistics** (mean, min, max, standard deviation, etc.).

CLASS - A statement which tells SAS to calculate statistics separately for a particular variable, usually *categorical* (nominal or ordinal), and only in some procedures (like PROC MEANS, PROC SUMMARY, PROC GLM).

### Importing data with PROC IMPORT

This procedure brings external data (.csv, .xlsx, etc.) into SAS.

```{sas}
PROC IMPORT DATAFILE = "/path/data.csv"
    OUT = mydata
    DBMS = csv
    REPLACE;
    GETNAMES = yes;   /* Uses first row as variable names */
RUN;
```

### Exploring the structure: PROC CONTENTS

To quickly see dataset structure (variable names, types, lengths, etc.).

```{sas}
PROC CONTENTS DATA = mydata;
RUN;
```

### Quick descriptive statistics: PROC MEANS

To check averages, min, max, etc. for numeric variables.

```{sas}
PROC MEANS DATA = mydata MEAN MIN MAX STD N;
RUN;
```

Options:

- MEAN, MIN, MAX, STD, N - Choose which stats to display.

- `CLASS <variable>;` - Groups stats by a categorical variable:

```{sas}
PROC MEANS DATA = mydata MEAN MIN MAX;
    CLASS gender;
RUN;
```

***

DATA STEP
---------

### Key definitions

DATA Step -  a unique procedural language created for SAS (and is the backbone of it) to be used in core data manipulations.

SET - reads observations from an existing SAS dataset into the DATA step.

INFILE - reads raw data (e.g., a text or .csv file) into SAS.

INPUT - defines the variables to be read when importing raw data.

***Assignment statement*** (`=`) - creates or modifies variables.

IF, THEN, ELSE - conditional statements to subset or assign values based on criteria.

KEEP, DROP - select which variables to retain or remove in the output dataset.

RENAME - changes the name of a variable in the output dataset.

MERGE - combines datasets **horizontally** (by matching key variables).

***Concatenation*** (SET with multiple datasets) - combines datasets **vertically** (stacking rows).

$ - marks a character variable.

FIRSTOBS = 2 - skips the header row (1) from reading, because it usually contains ***headers*** (column names), which you don’t want as data.

DSD (delimiter-sensitive data) - makes SAS to handle comma-separated data like a proper CSV parser — understanding commas, quotes, and missing values correctly.

### DATA Step loop agorithm

When you write a DATA step, e.g.,

```{sas}
DATA newdata;
    SET olddata;
    x = x + 1;
RUN;
```

it looks like a normal sequential code. But in reality, behind the scenes SAS is performing a **row-by-row loop**:

- Reading one observation (row) from an `olddata`.
- Executing all statements (top to bottom) for that single observation.
- Writing the result to a `newdata`.
- *Looping* back to the next observation.
- Repeating until the dataset ends.

This happens automatically — you don’t explicitly write a loop. That’s why it's called ***implicit loop***.

Understanding this loop:

- Explains why variables reset each iteration unless you use special statements (like RETAIN).
- Explains why order matters in the DATA step.
- Makes the DATA step feel less like “just code” and more like a data pipeline.

### Reading data

From an existing SAS dataset:

```{sas}
DATA work.copy;
    SET sashelp.class;
RUN;
```

From a raw text/.csv file:

```{sas}
DATA mydata;
    INFILE "/home/<username>/myfile.csv" DSD FIRSTOBS=2;
    INPUT name $ age height weight;
RUN;
```

### Creating a new variable







































