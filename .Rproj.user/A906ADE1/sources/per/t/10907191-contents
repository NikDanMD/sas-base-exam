---
Title: SAS BASE EXAM COOKBOOK
---

ANATOMY OF A SAS PROGRAM
------------------------

**Rule:** Each block starts with `DATA` or `PROC` and ends with `RUN;`.
Use `QUIT;` for some procs (e.g., `PROC SQL`).

### DATA step (build/modify data)

```{sas}
DATA library.dataset;       * Step starts;
    SET library.source;     * Bring in existing data (optional);
    INPUT var1 var2 $ var3; * Define variables for new data (optional);
    DATALINES;              * Inline data (optional);
value1 value2 value3
...
;
    * Transformations, conditions, new variables;
    IF var3 >= 60 THEN newvar = "Pass";
    ELSE newvar = "Fail";
RUN;                        * Step ends;
```

### PROC step (analyze/report)

```{sas}
PROC procedure_name DATA=library.dataset;  * Step starts;
    VAR var1 var2;                         * Select variables;
    TITLE "Report title";                  * Optional title;
RUN;                                       * Step ends;
```

LIBRARIES IN SAS ON-DEMAND FOR ACADEMICS (SODA)
-----------------------------------------------

### Default libraries

- WORK: temporary; cleared on logout
- MyLib: permanent; points to `/home/your-username/`

### Custom libraries

Creating a provate library pointing to a subfolder:

```{sas}
LIBNAME NikDan "/home/your-username/NikDanMD";
```

### Saving data

Temporary (gone after logout):

```{sas}
DATA employees;
```

Permanent (survives logout):

```{sas}
DATA MyLib.employees;
```

***

DATA STEPS (CREATING/MODIFYING DATASETS)
----------------------------------------

### Creating a dataset from scratch

```{sas}
DATA students;
    INPUT ID Name $ Score;
    DATALINES;
1 John 78
2 Mary 55
3 Paul 90
;
RUN;
```

Variables are numeric by default; use $ for a character. Rows must match the order defined in INPUT.

### Modifying an existing dataset

SET: brings in an existing dataset. Assigning a value to a new variable creates it automatically as a new column.

```{sas}
DATA students2;
    SET students;
    IF Score >= 60 THEN Result = "Pass";
    ELSE Result = "Fail";
RUN;
```

***

VIEWING DATASET CONTENT
-----------------------

### Basic syntax

PROC PRINT: display a dataset

```{sas}
PROC PRINT DATA=students;
RUN;
```

### Selecting variables

```{sas}
PROC PRINT DATA=students;
    VAR Name Score Result;
RUN;
```

### Adding a title

```{sas}
PROC PRINT DATA=students;
    VAR Name Score Result;
    TITLE "Exam results for students";
RUN;
```

Tips:
- omitting VAR prints all variables
- TITLE improves output clarity (optional)

***

FILTERING DATA 
--------------

```{sas}
PROC PRINT DATA=sashelp.class; 
RUN;
```

WHERE: filters dataset rows (like SQL's WHERE)

```{sas}
PROC PRINT DATA=sashelp.class;
	WHERE Sex='F';
RUN;
```

### Combinations of the conditions

- AND: both conditions true
- OR: at least one condition true
- NOT: exclude condition
- IN: match any in a list (`WHERE Sex IN ('F','M');`)

**NB!** Only one WHERE per PROC â€” combine conditions instead of stacking.

***